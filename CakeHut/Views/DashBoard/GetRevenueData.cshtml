@{
    ViewData["Title"] = "Filtered Revenue Data Chart";
}

<h2>Filtered Revenue Data Chart</h2>

<!-- Filter Dropdown -->
<label for="timePeriodFilter">Select Time Period:</label>
<select id="timePeriodFilter">
    <option value="Weekly">Weekly</option>
    <option value="Monthly">Monthly</option>
    <option value="Yearly">Yearly</option>
</select>

<!-- Chart Container -->
<canvas id="revenueChart" width="400" height="200"></canvas>

<!-- Chart.js Library -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    let chartInstance;

    // Function to fetch and render chart data
    async function updateChart(filter) {
        const response = await fetch(`/Dashboard/GetRevenueData?filter=${filter}`);
        const result = await response.json();

        const data = {
            labels: result.Labels,
            datasets: [{
                label: `${filter} Revenue`,
                data: result.RevenueValues,
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            }]
        };

        const config = {
            type: 'bar',
            data: data,
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        };

        // Destroy previous chart instance before creating a new one
        if (chartInstance) {
            chartInstance.destroy();
        }

        chartInstance = new Chart(
            document.getElementById('revenueChart'),
            config
        );
    }

    // Event listener for filter dropdown
    document.getElementById('timePeriodFilter').addEventListener('change', function () {
        const filter = this.value;
        updateChart(filter);
    });

    // Initialize chart with default filter (e.g., Weekly)
    updateChart('Weekly');
</script>
